{"remainingRequest":"/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/src/components/AddTask.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/src/components/AddTask.vue","mtime":1553019502879},{"path":"/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ellayeonjekoo/Desktop/GetTogether/gettogether/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import url(\"https://fonts.googleapis.com/css?family=Nunito\");\n@import \"./style.css\";\n",{"version":3,"sources":["AddTask.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA","file":"AddTask.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"addtask\">\n    <div id=\"tasks\">\n      <div id=\"myDIV\" class=\"header\">\n        <h3>Add Tasks</h3>\n        <input type=\"text\" id=\"myInput\" v-model=\"tasks\" placeholder=\"New Task...\">\n        <span @click=\"InsertTask\" class=\"addBtn\">Add</span>\n      </div>\n\n      <ul id=\"myUL\"></ul>\n    </div>\n  </div>\n</template>\n\n<style>\n@import url(\"https://fonts.googleapis.com/css?family=Nunito\");\n@import \"./style.css\";\n</style>\n\n<script>\nimport TaskList from \"@/components/TaskList.vue\";\nexport default {\n  name: \"AddTask\",\n  components: {\n    TaskList: TaskList\n  },\n  data() {\n    return {\n      tasks: \"\",\n      newTasks: \"\"\n    };\n  },\n  methods: {\n    deleteTask: async function(event) {\n      var parentDiv = event.target.parentElement;\n      event.target.style.display = \"none\";\n      parentDiv.style.display = \"none\";\n      var deleteForm = new FormData();\n      deleteForm.append(\"taskID\", event.target.parentElement.id);\n      var resp = await fetch(\n        \"https://gettogetherbcit.herokuapp.com/mysql/deleteTasks.php\",\n        {\n          method: \"POST\",\n          body: deleteForm\n        }\n      );\n    },\n    editTask: async function(event) {\n      var editTask = new FormData();\n      editTask.append(\n        \"tasks\",\n        event.target.parentElement.querySelector(\".updateInput\").value\n      );\n      editTask.append(\"taskID\", event.target.parentElement.id);\n      var resp = await fetch(\n        \"https://gettogetherbcit.herokuapp.com/mysql/updateTasks.php\",\n        {\n          method: \"POST\",\n          body: editTask\n        }\n      );\n\n      var result = await resp.json();\n\n      if (!result) {\n        alert(\"update failed. try again\");\n      } else {\n        var task = event.target.parentElement;\n        var taskText = task.querySelector(\".taskText\");\n\n        var updateButton = event.target;\n        updateButton.onclick = e => {\n          this.changeEditInput(e);\n        };\n\n        updateButton.style.backgroundImage =\n          \"url('https://image.flaticon.com/icons/svg/1159/1159633.svg')\";\n\n        taskText.innerHTML = event.target.parentElement.querySelector(\n          \".updateInput\"\n        ).value;\n\n        var inputBox = task.querySelector(\".updateInput\");\n        inputBox.style.display = \"none\";\n        inputBox.value = \"\";\n      }\n    },\n    createTaskElement: function(taskID, inputValue, assignedUsers) {\n      var i;\n      var li = document.createElement(\"div\");\n      var taskText = document.createElement(\"div\");\n      taskText.className = \"taskText\";\n      taskText.innerHTML = inputValue;\n      li.id = taskID;\n      li.className = \"listItems\";\n      li.appendChild(taskText);\n      if (inputValue === \"\") {\n        alert(\"You have to write something!\");\n      } else {\n        document.getElementById(\"myUL\").appendChild(li);\n      }\n      document.getElementById(\"myInput\").value = \"\";\n\n      var updateInput = document.createElement(\"input\");\n      updateInput.className = \"updateInput\";\n      updateInput.style.display = \"none\";\n      li.appendChild(updateInput);\n\n      // create 'x' button\n      var deleteButton = document.createElement(\"span\");\n      deleteButton.className = \"deleteButton\";\n      li.appendChild(deleteButton);\n\n      //create update button\n      var updateButton = document.createElement(\"span\");\n      updateButton.className = \"updateButton\";\n      li.appendChild(updateButton);\n\n      updateButton.onclick = e => {\n        this.changeEditInput(e);\n      };\n\n      var deleteButton = document.getElementsByClassName(\"deleteButton\");\n\n      for (i = 0; i < deleteButton.length; i++) {\n        deleteButton[i].onclick = e => {\n          this.deleteTask(e);\n        };\n      }\n\n      if (assignedUsers !== undefined) {\n        for (i = 0; i < assignedUsers.length; i++) {\n          var assignedUserList = document.createElement(\"div\");\n          assignedUserList.className = \"userListForAdmin\";\n          assignedUserList.innerHTML = assignedUsers[i];\n          li.appendChild(assignedUserList);\n        }\n      }\n    },\n    changeEditInput: async function(event) {\n      var task = event.target.parentElement;\n      var taskText = task.querySelector(\".taskText\");\n\n      var updateButton = event.target;\n      updateButton.onclick = e => {\n        this.editTask(e);\n      };\n\n      updateButton.style.backgroundImage =\n        \"url('https://image.flaticon.com/icons/svg/128/128384.svg')\";\n\n      var inputBox = task.querySelector(\".updateInput\");\n      inputBox.style.display = \"block\";\n      inputBox.style.margin = \"auto\";\n      inputBox.value = taskText.innerHTML;\n\n      taskText.innerHTML = \"\";\n    },\n    InsertTask: async function() {\n      var taskForm = new FormData();\n      var inputValue = document.getElementById(\"myInput\").value;\n      taskForm.append(\"tasks\", this.tasks);\n      taskForm.append(\"eventCode\", sessionStorage.getItem(\"eventCode\"));\n\n      if (inputValue === \"\") {\n        alert(\"You have to write something!\");\n      } else {\n        var resp = await fetch(\n          \"https://gettogetherbcit.herokuapp.com/mysql/insertTasks.php\",\n          {\n            method: \"POST\",\n            body: taskForm\n          }\n        );\n        var json = await resp.json();\n\n        if (json) {\n          this.createTaskElement(json, inputValue, undefined);\n        }\n      }\n    }\n  },\n  beforeCreate: async function() {\n    var displayTasks = new FormData();\n    displayTasks.append(\"eventCode\", sessionStorage.getItem(\"eventCode\"));\n\n    var resp = await fetch(\n      \"https://gettogetherbcit.herokuapp.com/mysql/getJoinedTasks.php\",\n      {\n        method: \"POST\",\n        body: displayTasks\n      }\n    );\n\n    var json = await resp.json();\n\n    if (json.length > 0) {\n      this.isTasksNotEmpty = true;\n      var tasksMap = new Map();\n      for (var i = 0; i < json.length; i++) {\n        tasksMap.set(json[i].id, json[i]);\n      }\n\n      this.newTasks = tasksMap;\n\n      var assignedUsers = new FormData();\n      assignedUsers.append(\"eventCode\", sessionStorage.getItem(\"eventCode\"));\n\n      var resp2 = await fetch(\n        \"https://gettogetherbcit.herokuapp.com/mysql/getAssignedUsers.php\",\n        {\n          method: \"POST\",\n          body: assignedUsers\n        }\n      );\n\n      var json2 = await resp2.json();\n      var usersArray = [];\n      for (var i = 0; i < json2.length; i++) {\n        if (tasksMap.has(json2[i].taskID)) {\n          var taskObject = tasksMap.get(json2[i].taskID);\n          if (taskObject.assignedUsers !== undefined) {\n            usersArray = taskObject.assignedUsers;\n          } else {\n            usersArray = [];\n          }\n          usersArray.push(json2[i].username);\n          taskObject.assignedUsers = usersArray;\n        }\n        tasksMap.set(json2[i].taskID, taskObject);\n      }\n\n      var tasksJSONArray = [];\n      var temp = tasksMap.entries();\n\n      for (var task of temp) {\n        this.createTaskElement(\n          task[1].id,\n          task[1].tasks,\n          task[1].assignedUsers\n        );\n      }\n    }\n  }\n};\n</script>\n"]}]}